#!/bin/bash
#set -x
# /etc/init.d/pfs-server
#
# ubuntu compatible PFS service script
# 
#
### BEGIN INIT INFO
# Provides:          PFS Server
# Required-Start:    $remote_fs $syslog 
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: PFS Server
# Description:       This file starts/stops PFS Server 
### END INIT INFO

#########################################################################
#
# PFS Environment Configuration
#
#########################################################################

PFS_TOP="/data/PFS"
DESC="PFS Server"
NAME=pfs-server
PFS_USER=ubuntu
JBOSS_HOME="${PFS_TOP}/jboss-5.1.0.GA"
CONSOLE_LOG=${JBOSS_HOME}/server/default/log/console.out
# STOP_WAIT_TIME in seconds, Time to wait for the server to stop gracefully
STOP_WAIT_TIME="60"
#kill command to use after STOP_WAIT_TIME
KILL9="kill -9"
JAVA="${PFS_TOP}/jdk1.6.0_17/bin/java"
MAIN_PROGRAM="Dprogram.name=run.sh"
START_CMD="${JBOSS_HOME}/bin/start.sh"
#########################################################################

PATH=/bin:/usr/bin:/sbin:/usr/sbin:${JBOSS_HOME}/bin

SCRIPTNAME=/etc/init.d/$NAME


PIDFILE=/var/run/$NAME/${NAME}.pid

DAEMON=/usr/bin/daemon
DAEMON_ARGS="--name=$NAME --chdir=${JBOSS_HOME}/bin --inherit --output=$CONSOLE_LOG --pidfile=$PIDFILE"

SU=/bin/su

# Exit if the package is not installed
if [ ! -x "$DAEMON" ]; then
    echo "daemon package not installed" >&2
    exit 1
fi

# load environments
if [ -r /etc/default/locale ]; then
  . /etc/default/locale
  export LANG LANGUAGE
elif [ -r /etc/environment ]; then
  . /etc/environment
  export LANG LANGUAGE
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Make sure we run as root, since setting the max open files through
# ulimit requires root access
if [ `id -u` -ne 0 ]; then
    echo "The $NAME init script can only be run as root"
    exit 1
fi


#
# Function that starts the daemon/service
#
do_start()
{
    # the default location is /var/run/pfs-server/pfs-server but the parent directory needs to be created
    mkdir -p `dirname $PIDFILE` > /dev/null 2>&1 || true
    chown $PFS_USER `dirname $PIDFILE` 
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    $DAEMON $DAEMON_ARGS --running && return 1

    
    # --user in daemon doesn't prepare environment variables like HOME, USER, LOGNAME or USERNAME,
    # so we let su do so for us now
    $SU -l $PFS_USER --shell=/bin/bash -c "$DAEMON $DAEMON_ARGS -- ${START_CMD}" || return 2
}


#
# Verify that all PFS Server processes have been shutdown
# and if not, then do killall for them
# 
get_running() 
{

    return `ps -U $PFS_USER --no-headers -f | egrep -e "${JAVA}" | grep "$MAIN_PROGRAM" | grep -c -v grep`
}


list_descendants ()
{
  local children=$(ps -o pid= --ppid "$1")

  echo "$children"
}




force_stop() 
{
    get_running
    if [ $? -ne 0 ]; then 

### We need to kill the java process that is the started by the start.sh 
	myPID=`cat $PIDFILE`
	first=$(list_descendants $myPID)
	second=$(list_descendants $first)
# Kill the third level descendant
	$KILL9 $(list_descendants $second)
    fi
}

# Get the status of the daemon process
get_daemon_status()
{ 
    # --running returns 0, if daemon is runing
    # --running returns 1, if daemon is NOT runing
    $DAEMON $DAEMON_ARGS --running || return 1
}


#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    get_daemon_status 
    case "$?" in
	0) 
# 0 : daemon is runing
### Kill the actual java process -- 3rd level from daemon
	myPID=`cat $PIDFILE`
	first=$(list_descendants $myPID)
	second=$(list_descendants $first)
# Kill the third level descendant
	kill $(list_descendants $second)
        # wait for the process to really terminate
        for ((n=1;n<=$STOP_WAIT_TIME;n++)); do
            sleep 1
            $DAEMON $DAEMON_ARGS --running || break
        done
        if get_daemon_status; then
	        force_stop || return 3
        fi
	    ;;
	*)
	    force_stop || return 3
	    ;;
    esac

    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return 0
}

# Verify the process did in fact start successfully and didn't just bomb out
do_check_started_ok() {
    sleep 2
    if [ "$1" -ne "0" ]; then return $1; fi
    get_running
    if [ "$?" -eq "0" ]; then
        return 2
    else 
        return 0
    fi
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    START_STATUS="$?"
    do_check_started_ok "$START_STATUS"
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ; exit 7 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ; exit 100 ;;
    esac
    ;;
  restart)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        START_STATUS="$?"
        sleep 1
        do_check_started_ok "$START_STATUS"
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ; exit 100 ;; # Old process is still running
          *) log_end_msg 1 ; exit 100 ;; # Failed to start
        esac
        ;;
      *)
  	# Failed to stop
	log_end_msg 1
	;;
    esac
    ;;
  status)
# We need to create the parent directory so that daemon process does not error out
    mkdir -p `dirname $PIDFILE` > /dev/null 2>&1 || true
	get_daemon_status
	case "$?" in 
	 0) 
		echo "$DESC is running with the pid `cat $PIDFILE`"
		rc=0
		;;
	*) 
		get_running
		procs=$?
		if [ $procs -eq 0 ]; then 
			echo -n "$DESC is not running"
			if [ -f $PIDFILE ]; then 
				echo ", but the pidfile ($PIDFILE) still exists"
				rc=1
			else 
				echo
				rc=3
			fi
		
		else 
			echo "$procs instances of PFS Server are running at the moment"
			echo "but the pidfile $PIDFILE is missing"
			rc=0
		fi
		
		exit $rc
		;;
	esac
	;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
    ;;
esac

exit 0
